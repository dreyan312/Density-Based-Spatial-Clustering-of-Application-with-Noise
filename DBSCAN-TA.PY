# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DBSCAN-TA.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import MinMaxScaler


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(692, 502)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.csvInput = QtWidgets.QTextEdit(self.centralwidget)
        self.csvInput.setGeometry(QtCore.QRect(30, 60, 471, 41))
        self.csvInput.setObjectName("csvInput")
        self.btnBrowserFile = QtWidgets.QPushButton(self.centralwidget)
        self.btnBrowserFile.setGeometry(QtCore.QRect(560, 60, 101, 41))
        self.btnBrowserFile.setObjectName("btnBrowserFile")
        self.btnAnalisis = QtWidgets.QPushButton(self.centralwidget)
        self.btnAnalisis.setGeometry(QtCore.QRect(30, 210, 211, 51))
        self.btnAnalisis.setObjectName("btnAnalisis")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 40, 101, 16))
        self.label_3.setObjectName("label_3")
        self.inputCluster = QtWidgets.QComboBox(self.centralwidget)
        self.inputCluster.setGeometry(QtCore.QRect(30, 150, 211, 41))
        self.inputCluster.setObjectName("inputCluster")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 130, 101, 16))
        self.label.setObjectName("label")
        self.tabelOutput = QtWidgets.QTableWidget(self.centralwidget)
        self.tabelOutput.setGeometry(QtCore.QRect(270, 150, 391, 251))
        self.tabelOutput.setObjectName("tabelOutput")
        self.tabelOutput.setColumnCount(4)
        self.tabelOutput.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tabelOutput.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabelOutput.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabelOutput.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabelOutput.setHorizontalHeaderItem(3, item)
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(30, 330, 111, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 280, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(150, 330, 111, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 310, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(150, 310, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.btnClear = QtWidgets.QPushButton(self.centralwidget)
        self.btnClear.setGeometry(QtCore.QRect(30, 370, 111, 31))
        self.btnClear.setObjectName("btnClear")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 692, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.btnBrowserFile.clicked.connect(self.pushButton_handler)
        self.btnClear.clicked.connect(self.clr)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Aplikasi Clustering DBSCAN"))
        self.btnBrowserFile.setText(_translate("MainWindow", "Browse File"))
        self.btnAnalisis.setText(_translate("MainWindow", "Analisis "))
        self.label_3.setText(_translate("MainWindow", "Input File CSV"))
        self.label.setText(_translate("MainWindow", "Pilih Cluster"))
        item = self.tabelOutput.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "id"))
        item = self.tabelOutput.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "lat"))
        item = self.tabelOutput.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "long"))
        item = self.tabelOutput.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "cluster"))
        self.label_4.setText(_translate("MainWindow", "Rata-Rata"))
        self.label_5.setText(_translate("MainWindow", "Latitude"))
        self.label_6.setText(_translate("MainWindow", "Longitude"))
        self.btnClear.setText(_translate("MainWindow", "Clear"))

    def pushButton_handler(self):
        self.open_dialog_box()

    def clr(self):
        self.textEdit_2.clear()
        self.textEdit_3.clear()
        self.tabelOutput.clear()
        plt.close()

    def b(self):
        path = self.csvInput.toPlainText()
        driver = pd.read_csv(path)
        driver_x = driver.drop(["place","info","user", "waktu","tanggal", "status"], axis=1)

        # merubah data menjadi array
        x_array = np.array(driver_x)
        # normalisasi data
        scaler = MinMaxScaler()
        x_scaled = scaler.fit_transform(x_array)


        db = DBSCAN(eps=0.1, min_samples=2)
        db.fit(x_scaled)

        labels = db.labels_
        n_raw = len(labels) #total baris

        n_cluster = len(set(labels)) - (1 if -1 in labels else 0)
        print("terdapat " + str(n_cluster) + " cluster yang terbentuk")

        a = str(self.inputCluster.currentText())

        self.tabelOutput.setRowCount(n_raw)
        baris = 0
        totallat = 0
        totallong = 0
        hitung = 0

        for i in range(0, n_raw):
            if (db.labels_[i] == int(a)):
                self.tabelOutput.setItem(baris, 0, QtWidgets.QTableWidgetItem(str(driver.values[i, 0])))
                self.tabelOutput.setItem(baris, 1, QtWidgets.QTableWidgetItem(str(driver.values[i, 2])))
                self.tabelOutput.setItem(baris, 2, QtWidgets.QTableWidgetItem(str(driver.values[i, 3])))
                self.tabelOutput.setItem(baris, 3, QtWidgets.QTableWidgetItem(str(db.labels_[i])))

                baris += 1

                totallat = totallat + driver.values[i, 2]
                totallong = totallong + driver.values[i, 3]
                hitung += 1

        meanlat = totallat / hitung
        self.textEdit_2.setText(str(meanlat))
        meanlong = totallong / hitung
        self.textEdit_3.setText(str(meanlong))

        driver["kluster"] = db.labels_
        output = plt.scatter(x_scaled[:, 0], x_scaled[:, 1], s=100, c=driver.kluster, marker="o", alpha=1, )

        plt.title("Hasil klustering DBSCAN")
        plt.colorbar(output)
        plt.show()




    def open_dialog_box(self):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        self.csvInput.setText(path)
        path = self.csvInput.toPlainText()
        driver = pd.read_csv(path)

        driver_x = driver.drop(["place","info","user", "waktu","tanggal","status"], axis=1)



        # merubah data menjadi array
        x_array = np.array(driver_x)
        # normalisasi data
        scaler = MinMaxScaler()
        x_scaled = scaler.fit_transform(x_array)

        db = DBSCAN(eps=0.1, min_samples=2)
        db.fit(x_scaled)

        labels = db.labels_
        n_raw = len(labels)

        n_cluster = len(set(labels)) - (1 if -1 in labels else 0)
        print("terdapat " + str(n_cluster) + " cluster yang terbentuk")



        for z in range(-1, n_cluster):
            self.inputCluster.addItem(str(z))

        self.btnAnalisis.clicked.connect(self.b)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
